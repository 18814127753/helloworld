/*
 * author:charles
 * date:2017.4.28
 * function:生成服务客户，新逻辑根据签约单生成，并且没有交易单数据，旧逻辑根据交易单生成服务客户
 	第一个参数为一线公司ID，第二个参数为项目ID。
    第二个参数为null时调用范围为该一线公司，不为null时调用的是该一线公司下的项目。
 	Database.executeBatch(new Service_CstGenerateBatch(vankeCompanyID,null),200);
 	Database.executeBatch(new Service_CstGenerateBatch(vankeCompanyID,ProjectGUID),200);
    --a1N280000012tekEAA 杭州一线公司ID
    --a1N280000012tf0EAA 佛山一线公司ID
 */
global class Service_CstGenerateBatch implements Database.Batchable<sObject>,Database.Stateful
{
    global String vankeCompanyID;
    global String ProjectID;
    public Service_CstGenerateBatch(String str1,String str2){
			vankeCompanyID = str1;
        	ProjectID = str2;
    }
    global Database.QueryLocator start(Database.BatchableContext BC){
        String str;
        if(vankeCompanyID !=null && ProjectID == null)
        {
            str = ('SELECT Id,SSID__c,Status__c,Vanke_Company__c,'
                                         +'Trade__r.Room__c,Trade__r.Account__c,'//交易
                                         +'Room__r.Id,Room__r.MYGUID__c,'//房间
                                         +'Account__r.Id,Account__r.MYGUID__c '//客户
                                         +'FROM Contract__c '
                                         //+'where id = \'a0lp0000000SBS9\''
                   						//+'where id = \'a0l28000000PpGV\' or id = \'a0l28000000Vxvv\''
                                         +'where Room__r.Vanke_Company__c = \''+vankeCompanyID+'\''
                  );
                                         //where id = 'a0l28000000UI3Y' or id = 'a0lp0000000SBS9'
        }
        else if (vankeCompanyID !=null && ProjectID != null)
        {
            str = ('SELECT Id,SSID__c,Status__c,Vanke_Company__c,'
                                         +'Trade__r.Room__c,Trade__r.Account__c,'//交易
                                         +'Room__r.Id,Room__r.MYGUID__c,'//房间
                                         +'Account__r.Id,Account__r.MYGUID__c '//客户
                                         +'FROM Contract__c '
                                         +'where Room__r.Vanke_Company__c = \''+vankeCompanyID+'\' '
                  						+'and Room__r.Project__c = \''+ProjectID+'\' '
                  );
        }
        //system.debug('-----------------------'+str);
        return Database.getQueryLocator(str);
    }   
    
    global void execute(Database.BatchableContext BC, List<Contract__c> contracts)
    {
        Set<Id> Set_TradeIds = new Set<Id>();//交易Id
        Set<Id> Set_RoomIds = new Set<Id>();//房间Id
        Set<Id> Set_RoomIds2 = new Set<Id>();//房间Id
        Set<id> Set_ContractIds = new Set<ID>();//签约单ID
        for(Contract__c newContract : contracts)
        {
            
            //旧逻辑
            if(newContract.Status__c == '激活' && newContract.Trade__c != null && newContract.SSID__c == null && newContract.Room__c !=null)
            {
                Set_TradeIds.add(newContract.Trade__c);
                Set_RoomIds.add(newContract.Room__c);
            }
            //新逻辑
            if( (newContract.Status__c == '激活') && newContract.SSID__c!=null && newContract.Room__c !=null)
            {
                Set_ContractIds.add(newContract.id);
                Set_RoomIds2.add(newContract.Room__c);
            }
        }
        
        //旧逻辑
        if(Set_TradeIds.size()>0 && Set_RoomIds.size()>0)
        	SVC_ContractCreateServiceCstComm(Set_TradeIds,Set_RoomIds);
        //新逻辑
        if(Set_ContractIds.size()>0 && Set_RoomIds2.size()>0)
        	SVC_ContractCreateServiceCstComm_New(Set_ContractIds,Set_RoomIds2);
    }
    
    global void finish(Database.BatchableContext BC)
    {
        
    }
    
    //----------------------------------------------旧逻辑----------------------------
    public void SVC_ContractCreateServiceCstComm(Set<Id> Set_TradeIds,Set<Id> Set_RoomIds)
    {
        //房间及对应的交易客户数据
        Map<Id,List<Trade2Cst__c>> Map_RoomCst = new Map<Id,List<Trade2Cst__c>>();
        //房间及对应是否有激活合同
        Map<Id,Boolean> Map_IsActiveContract =new Map<Id,Boolean>();

        List<Trade__c> trades = [select Id
                                 ,Room__c,Room__r.MYGUID__c
                                 ,(select Status__c from Contract__r where Status__c ='激活' and SSID__c = null)
                                 ,(select Customer__r.LastName,Customer__r.IdentifyType1__c,Customer__r.Identify1__c,Customer__r.Phone
                                           ,Customer__r.Address__c,Customer__r.Gender__c,IsDeleted__c,Trade__r.Room__r.MYGUID__c ,Customer__r.MYGUID__c
                                          from Trade_Trade2Cst__r  order By lastmodifiedDate desc) 
                                 from Trade__c where Id=: Set_TradeIds and Room__c !=null];
        if(trades.size() == 0) return;
        
        for(Trade__c trade : trades)
        {
            //包含激活的签约单
            if(trade.Contract__r!=null && trade.Contract__r.size()>0)
            {
                Map_IsActiveContract.put(trade.Room__c,True);
            }
            else
            {
                Map_IsActiveContract.put(trade.Room__c,false);
            }
            
            //去除重复交易客户的List
            List<Trade2Cst__c> tempList = new List<Trade2Cst__c>();
            //去除重复交易客户的Set
            Set<String> tempSet = new Set<String>();

            //房间及对应的交易客户数据
            for(Trade2Cst__c TradeCst : trade.Trade_Trade2Cst__r)
            {
                String SCGUID = trade.Room__r.MYGUID__c+TradeCst.Customer__r.MYGUID__c;
                //不存在相同SCGUID时
                if(!tempSet.contains(SCGUID))
                {
                    tempSet.add(SCGUID);
                    tempList.add(TradeCst);
                }
                //存在相同SCGUID时，取有效的交易客户
                else{
                 	if(TradeCst.IsDeleted__c == false)
                    {
                        //找到相同GUID的交易客户，删除掉，将新的有效的交易客户加入List
                        Integer temp = 0;
                    	for(Trade2Cst__c tc:tempList)
                        {
                            if(tc.Trade__r.Room__r.MYGUID__c+tc.Customer__r.MYGUID__c == SCGUID)
                            {
                             	tempList.remove(temp);
                                tempList.add(TradeCst);
                                break;
                            }
                            temp++;
                        }
                    }
                }
            }
            Map_RoomCst.put(trade.Room__c,tempList);
        }
        
        List<Service_Cst__c> serviceCsts = new List<Service_Cst__c>();
        for(Id RoomId : Set_RoomIds)
        {
            Boolean temp = false;
            if(Map_IsActiveContract.containsKey(RoomId) && Map_IsActiveContract.get(RoomId))
            {
                temp = true;
            }
			
            for(Trade2Cst__c TradeCst : Map_RoomCst.get(RoomId))
            {
                Service_Cst__c serviceCst = new Service_Cst__c();
                serviceCst.SCGUID__c = TradeCst.Trade__r.Room__r.MYGUID__c + TradeCst.Customer__r.MYGUID__c;
                serviceCst.Room__c = RoomId;
                serviceCst.Name = TradeCst.Customer__r.LastName;
                serviceCst.Phone__c = TradeCst.Customer__r.Phone;
                serviceCst.Identify_Type__c = TradeCst.Customer__r.IdentifyType1__c;
                serviceCst.Identify_No__c = TradeCst.Customer__r.Identify1__c;
                serviceCst.Sex__c = TradeCst.Customer__r.Gender__c;
                serviceCst.Address__c = TradeCst.Customer__r.Address__c;
                serviceCst.Type__c = '业主';
                serviceCst.Approval_Status__c = '已通过';

                if(temp)
                    serviceCst.Status__c = (TradeCst.IsDeleted__c ? '无效' : '有效');
                else
                    serviceCst.Status__c = '无效';
                serviceCsts.add(serviceCst);
            }
        }
        if(serviceCsts.size() > 0) upsert serviceCsts SCGUID__c;
    }
    
    
    
    
   //生成服务客户新逻辑(新销售系统中没有交易单，故原逻辑按照交易生成服务客户，改成按照签约单生成)
    public void SVC_ContractCreateServiceCstComm_New(Set<id> Set_ContractIds, Set<id> Set_RoomIds)
    {
        //房间及对应的交易客户数据
        Map<Id,List<Trade2Cst__c>> Map_RoomCst = new Map<Id,List<Trade2Cst__c>>();
        //房间及对应是否有激活合同
        Map<Id,Boolean> Map_IsActiveContract = new Map<Id,Boolean>();

        for(Room__c room : [select Id
                            ,(select Id from ContractdGLk__r where Status__c = '激活')
                            from Room__c
                            where Id in: Set_RoomIds])
        {
            if(room.ContractdGLk__r.size() > 0) 
                Map_IsActiveContract.put(room.Id, True);
            else 
                Map_IsActiveContract.put(room.Id, false);
        }
        List<Contract__c> contracts = [select Id
                              ,Room__c,SSID__c,Room__r.MYGUID__c,Room__r.SSID__c
                              ,Status__c,Room__r.ContractSignatureDate__c,Room__r.LaunchDate__c,LaunchDate__c,Signature_Date__c
                              ,(select Customer__r.LastName,Customer__r.IdentifyType1__c,Customer__r.Identify1__c,Customer__r.Phone,Customer__r.Address__c,Customer__r.Gender__c
                                ,Is_Deleted__c,IsDeleted__c,Customer__r.MYGUID__c,Trade__r.Room__r.MYGUID__c,Contract__r.Room__r.MYGUID__c,Contract__r.SSID__c,Customer__r.SSID__c,Contract__r.Room__r.SSID__c
                                from Trade2Csts__r order By lastmodifiedDate desc)
                              from Contract__c
                              where Id in: Set_ContractIds and Room__c != null];
        for(Contract__c ct : contracts)
        {
            
            //去除重复交易客户的List
            List<Trade2Cst__c> tempList = new List<Trade2Cst__c>();
            //去除重复交易客户的Set
            Set<String> tempSet = new Set<String>();

            //房间及对应的交易客户数据
            for(Trade2Cst__c TradeCst : ct.Trade2Csts__r)
            {
                String SCGUID;
				Boolean IsUseMY = false;
                if(TradeCst.Contract__r.Room__r.MYGUID__c != null && TradeCst.Customer__r.MYGUID__c != null)
                {
                    SCGUID = TradeCst.Contract__r.Room__r.MYGUID__c+TradeCst.Customer__r.MYGUID__c;
                    IsUseMY = true;
                }
                else
                {
                    SCGUID = TradeCst.Contract__r.Room__r.SSID__c+TradeCst.Customer__r.SSID__c;  
                }
                //不存在相同SCGUID时
                if(!tempSet.contains(SCGUID))
                {
                    tempSet.add(SCGUID);
                    tempList.add(TradeCst);
                }
                //存在相同SCGUID时，取有效的交易客户
                else
                {
                    	//找到相同GUID的交易客户，删除掉，将新的有效的交易客户加入List
                        if(TradeCst.Is_Deleted__c == false)
                        {
                            Integer temp = 0;
                            for(Trade2Cst__c tc:tempList)
                            {
                                String SCGUID2;
                                if(IsUseMY)
                                {
                                	SCGUID2 = tc.Contract__r.Room__r.MYGUID__c+tc.Customer__r.MYGUID__c;
                                }
                                else
                                {
                                 	SCGUID2 = tc.Contract__r.Room__r.SSID__c+tc.Customer__r.SSID__c;   
                                }
                                if(SCGUID2 == SCGUID)
                                {
                                    tempList.remove(temp);
                                    tempList.add(TradeCst);
                                    break;
                                }
                                temp++;
                            }
                        }
                }
            }
            Map_RoomCst.put(ct.Room__c,tempList);
        }
		        
        
        List<Service_Cst__c> serviceCsts = new List<Service_Cst__c>();
        for(Id RoomId : Set_RoomIds)
        {
            Boolean temp = false;
            if(Map_IsActiveContract.containsKey(RoomId) && Map_IsActiveContract.get(RoomId))
            {
                temp = true;
            }
			
            for(Trade2Cst__c TradeCst : Map_RoomCst.get(RoomId))
            {
                Service_Cst__c serviceCst = new Service_Cst__c();
                if(TradeCst.Contract__r.Room__r.MYGUID__c != null && TradeCst.Customer__r.MYGUID__c != null)
                {
                    serviceCst.SCGUID__c =TradeCst.Contract__r.Room__r.MYGUID__c+TradeCst.Customer__r.MYGUID__c;
                }
                else
                {
                    serviceCst.SCGUID__c = TradeCst.Contract__r.Room__r.SSID__c+TradeCst.Customer__r.SSID__c;  
                }
                serviceCst.Room__c = RoomId;
                serviceCst.Name = TradeCst.Customer__r.LastName;
                serviceCst.Phone__c = TradeCst.Customer__r.Phone;
                serviceCst.Identify_Type__c = TradeCst.Customer__r.IdentifyType1__c;
                serviceCst.Identify_No__c = TradeCst.Customer__r.Identify1__c;
                serviceCst.Sex__c = TradeCst.Customer__r.Gender__c;
                serviceCst.Address__c = TradeCst.Customer__r.Address__c;
                serviceCst.Type__c = '业主';
                serviceCst .Approval_Status__c = '已通过';

                if(temp)
                    serviceCst.Status__c = (TradeCst.IsDeleted__c ? '无效' : '有效');
                else
                    serviceCst.Status__c = '无效';

                serviceCsts.add(serviceCst);
            }
        }
        //system.debug('=====================================新逻辑');
        if(serviceCsts.size() > 0) upsert serviceCsts SCGUID__c;
    }
    
}